package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"graphql-server/client"
	"graphql-server/graph"
	"shared/model"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, customerID string, productIds []string, total float64, status string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// UpdateOrder is the resolver for the updateOrder field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, orderID string, status *string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrder - updateOrder"))
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, orderID string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteOrder - deleteOrder"))
}

// Status is the resolver for the status field.
func (r *orderResolver) Status(ctx context.Context, obj *model.Order) (string, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// PaymentMethod is the resolver for the payment_method field.
func (r *orderResolver) PaymentMethod(ctx context.Context, obj *model.Order) (string, error) {
	panic(fmt.Errorf("not implemented: PaymentMethod - payment_method"))
}

// GetOrder is the resolver for the getOrder field.
func (r *queryResolver) GetOrder(ctx context.Context, orderID string) (*model.Order, error) {
	response, err := client.GetOrder(orderID)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// GetAllOrders is the resolver for the getAllOrders field.
func (r *queryResolver) GetAllOrders(ctx context.Context) ([]*model.Order, error) {
	response, err := client.GetAllOrders()
	if err != nil {
		return nil, err
	}
	return response.Orders, nil
}

// Order returns graph.OrderResolver implementation.
func (r *Resolver) Order() graph.OrderResolver { return &orderResolver{r} }

type orderResolver struct{ *Resolver }
