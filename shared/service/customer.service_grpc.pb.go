// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: customer.service.proto

package service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	model "shared/model"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CustomerQueryService_GetCustomer_FullMethodName     = "/model.CustomerQueryService/getCustomer"
	CustomerQueryService_GetAllCustomers_FullMethodName = "/model.CustomerQueryService/getAllCustomers"
)

// CustomerQueryServiceClient is the client API for CustomerQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerQueryServiceClient interface {
	GetCustomer(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*model.Customer, error)
	GetAllCustomers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllCustomersResponse, error)
}

type customerQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerQueryServiceClient(cc grpc.ClientConnInterface) CustomerQueryServiceClient {
	return &customerQueryServiceClient{cc}
}

func (c *customerQueryServiceClient) GetCustomer(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*model.Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Customer)
	err := c.cc.Invoke(ctx, CustomerQueryService_GetCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerQueryServiceClient) GetAllCustomers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllCustomersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCustomersResponse)
	err := c.cc.Invoke(ctx, CustomerQueryService_GetAllCustomers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerQueryServiceServer is the server API for CustomerQueryService service.
// All implementations must embed UnimplementedCustomerQueryServiceServer
// for forward compatibility.
type CustomerQueryServiceServer interface {
	GetCustomer(context.Context, *wrappers.StringValue) (*model.Customer, error)
	GetAllCustomers(context.Context, *empty.Empty) (*GetAllCustomersResponse, error)
	mustEmbedUnimplementedCustomerQueryServiceServer()
}

// UnimplementedCustomerQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerQueryServiceServer struct{}

func (UnimplementedCustomerQueryServiceServer) GetCustomer(context.Context, *wrappers.StringValue) (*model.Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCustomerQueryServiceServer) GetAllCustomers(context.Context, *empty.Empty) (*GetAllCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomers not implemented")
}
func (UnimplementedCustomerQueryServiceServer) mustEmbedUnimplementedCustomerQueryServiceServer() {}
func (UnimplementedCustomerQueryServiceServer) testEmbeddedByValue()                              {}

// UnsafeCustomerQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerQueryServiceServer will
// result in compilation errors.
type UnsafeCustomerQueryServiceServer interface {
	mustEmbedUnimplementedCustomerQueryServiceServer()
}

func RegisterCustomerQueryServiceServer(s grpc.ServiceRegistrar, srv CustomerQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerQueryService_ServiceDesc, srv)
}

func _CustomerQueryService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueryServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueryService_GetCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueryServiceServer).GetCustomer(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerQueryService_GetAllCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerQueryServiceServer).GetAllCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerQueryService_GetAllCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerQueryServiceServer).GetAllCustomers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerQueryService_ServiceDesc is the grpc.ServiceDesc for CustomerQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.CustomerQueryService",
	HandlerType: (*CustomerQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCustomer",
			Handler:    _CustomerQueryService_GetCustomer_Handler,
		},
		{
			MethodName: "getAllCustomers",
			Handler:    _CustomerQueryService_GetAllCustomers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.service.proto",
}

const (
	CustomerCommandService_CreateCustomer_FullMethodName = "/model.CustomerCommandService/createCustomer"
	CustomerCommandService_UpdateCustomer_FullMethodName = "/model.CustomerCommandService/updateCustomer"
	CustomerCommandService_DeleteCustomer_FullMethodName = "/model.CustomerCommandService/deleteCustomer"
)

// CustomerCommandServiceClient is the client API for CustomerCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerCommandServiceClient interface {
	CreateCustomer(ctx context.Context, in *CommandCustomerRequest, opts ...grpc.CallOption) (*model.Customer, error)
	UpdateCustomer(ctx context.Context, in *CommandCustomerRequest, opts ...grpc.CallOption) (*model.Customer, error)
	DeleteCustomer(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
}

type customerCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerCommandServiceClient(cc grpc.ClientConnInterface) CustomerCommandServiceClient {
	return &customerCommandServiceClient{cc}
}

func (c *customerCommandServiceClient) CreateCustomer(ctx context.Context, in *CommandCustomerRequest, opts ...grpc.CallOption) (*model.Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Customer)
	err := c.cc.Invoke(ctx, CustomerCommandService_CreateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) UpdateCustomer(ctx context.Context, in *CommandCustomerRequest, opts ...grpc.CallOption) (*model.Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Customer)
	err := c.cc.Invoke(ctx, CustomerCommandService_UpdateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerCommandServiceClient) DeleteCustomer(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, CustomerCommandService_DeleteCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerCommandServiceServer is the server API for CustomerCommandService service.
// All implementations must embed UnimplementedCustomerCommandServiceServer
// for forward compatibility.
type CustomerCommandServiceServer interface {
	CreateCustomer(context.Context, *CommandCustomerRequest) (*model.Customer, error)
	UpdateCustomer(context.Context, *CommandCustomerRequest) (*model.Customer, error)
	DeleteCustomer(context.Context, *wrappers.StringValue) (*wrappers.BoolValue, error)
	mustEmbedUnimplementedCustomerCommandServiceServer()
}

// UnimplementedCustomerCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerCommandServiceServer struct{}

func (UnimplementedCustomerCommandServiceServer) CreateCustomer(context.Context, *CommandCustomerRequest) (*model.Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerCommandServiceServer) UpdateCustomer(context.Context, *CommandCustomerRequest) (*model.Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCustomerCommandServiceServer) DeleteCustomer(context.Context, *wrappers.StringValue) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedCustomerCommandServiceServer) mustEmbedUnimplementedCustomerCommandServiceServer() {
}
func (UnimplementedCustomerCommandServiceServer) testEmbeddedByValue() {}

// UnsafeCustomerCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerCommandServiceServer will
// result in compilation errors.
type UnsafeCustomerCommandServiceServer interface {
	mustEmbedUnimplementedCustomerCommandServiceServer()
}

func RegisterCustomerCommandServiceServer(s grpc.ServiceRegistrar, srv CustomerCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerCommandService_ServiceDesc, srv)
}

func _CustomerCommandService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).CreateCustomer(ctx, req.(*CommandCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_UpdateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).UpdateCustomer(ctx, req.(*CommandCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerCommandService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerCommandServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerCommandService_DeleteCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerCommandServiceServer).DeleteCustomer(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerCommandService_ServiceDesc is the grpc.ServiceDesc for CustomerCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.CustomerCommandService",
	HandlerType: (*CustomerCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createCustomer",
			Handler:    _CustomerCommandService_CreateCustomer_Handler,
		},
		{
			MethodName: "updateCustomer",
			Handler:    _CustomerCommandService_UpdateCustomer_Handler,
		},
		{
			MethodName: "deleteCustomer",
			Handler:    _CustomerCommandService_DeleteCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer.service.proto",
}
