// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: product.service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	model "shared/model"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductQueryService_GetProduct_FullMethodName     = "/model.ProductQueryService/getProduct"
	ProductQueryService_GetAllProducts_FullMethodName = "/model.ProductQueryService/getAllProducts"
)

// ProductQueryServiceClient is the client API for ProductQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductQueryServiceClient interface {
	GetProduct(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*model.Product, error)
	GetAllProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
}

type productQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductQueryServiceClient(cc grpc.ClientConnInterface) ProductQueryServiceClient {
	return &productQueryServiceClient{cc}
}

func (c *productQueryServiceClient) GetProduct(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*model.Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Product)
	err := c.cc.Invoke(ctx, ProductQueryService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productQueryServiceClient) GetAllProducts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, ProductQueryService_GetAllProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductQueryServiceServer is the server API for ProductQueryService service.
// All implementations must embed UnimplementedProductQueryServiceServer
// for forward compatibility.
type ProductQueryServiceServer interface {
	GetProduct(context.Context, *wrapperspb.StringValue) (*model.Product, error)
	GetAllProducts(context.Context, *emptypb.Empty) (*GetAllProductsResponse, error)
	mustEmbedUnimplementedProductQueryServiceServer()
}

// UnimplementedProductQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductQueryServiceServer struct{}

func (UnimplementedProductQueryServiceServer) GetProduct(context.Context, *wrapperspb.StringValue) (*model.Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductQueryServiceServer) GetAllProducts(context.Context, *emptypb.Empty) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedProductQueryServiceServer) mustEmbedUnimplementedProductQueryServiceServer() {}
func (UnimplementedProductQueryServiceServer) testEmbeddedByValue()                             {}

// UnsafeProductQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductQueryServiceServer will
// result in compilation errors.
type UnsafeProductQueryServiceServer interface {
	mustEmbedUnimplementedProductQueryServiceServer()
}

func RegisterProductQueryServiceServer(s grpc.ServiceRegistrar, srv ProductQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductQueryService_ServiceDesc, srv)
}

func _ProductQueryService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductQueryServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductQueryService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductQueryServiceServer).GetProduct(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductQueryService_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductQueryServiceServer).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductQueryService_GetAllProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductQueryServiceServer).GetAllProducts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductQueryService_ServiceDesc is the grpc.ServiceDesc for ProductQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.ProductQueryService",
	HandlerType: (*ProductQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getProduct",
			Handler:    _ProductQueryService_GetProduct_Handler,
		},
		{
			MethodName: "getAllProducts",
			Handler:    _ProductQueryService_GetAllProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.service.proto",
}

const (
	ProductCommandService_CreateProduct_FullMethodName = "/model.ProductCommandService/createProduct"
	ProductCommandService_UpdateProduct_FullMethodName = "/model.ProductCommandService/updateProduct"
	ProductCommandService_DeleteProduct_FullMethodName = "/model.ProductCommandService/deleteProduct"
)

// ProductCommandServiceClient is the client API for ProductCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCommandServiceClient interface {
	CreateProduct(ctx context.Context, in *CommandProductRequest, opts ...grpc.CallOption) (*model.Product, error)
	UpdateProduct(ctx context.Context, in *CommandProductRequest, opts ...grpc.CallOption) (*model.Product, error)
	DeleteProduct(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type productCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCommandServiceClient(cc grpc.ClientConnInterface) ProductCommandServiceClient {
	return &productCommandServiceClient{cc}
}

func (c *productCommandServiceClient) CreateProduct(ctx context.Context, in *CommandProductRequest, opts ...grpc.CallOption) (*model.Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Product)
	err := c.cc.Invoke(ctx, ProductCommandService_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCommandServiceClient) UpdateProduct(ctx context.Context, in *CommandProductRequest, opts ...grpc.CallOption) (*model.Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Product)
	err := c.cc.Invoke(ctx, ProductCommandService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productCommandServiceClient) DeleteProduct(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, ProductCommandService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCommandServiceServer is the server API for ProductCommandService service.
// All implementations must embed UnimplementedProductCommandServiceServer
// for forward compatibility.
type ProductCommandServiceServer interface {
	CreateProduct(context.Context, *CommandProductRequest) (*model.Product, error)
	UpdateProduct(context.Context, *CommandProductRequest) (*model.Product, error)
	DeleteProduct(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedProductCommandServiceServer()
}

// UnimplementedProductCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductCommandServiceServer struct{}

func (UnimplementedProductCommandServiceServer) CreateProduct(context.Context, *CommandProductRequest) (*model.Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductCommandServiceServer) UpdateProduct(context.Context, *CommandProductRequest) (*model.Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedProductCommandServiceServer) DeleteProduct(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedProductCommandServiceServer) mustEmbedUnimplementedProductCommandServiceServer() {}
func (UnimplementedProductCommandServiceServer) testEmbeddedByValue()                               {}

// UnsafeProductCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCommandServiceServer will
// result in compilation errors.
type UnsafeProductCommandServiceServer interface {
	mustEmbedUnimplementedProductCommandServiceServer()
}

func RegisterProductCommandServiceServer(s grpc.ServiceRegistrar, srv ProductCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductCommandService_ServiceDesc, srv)
}

func _ProductCommandService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCommandServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCommandService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCommandServiceServer).CreateProduct(ctx, req.(*CommandProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCommandService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCommandServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCommandService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCommandServiceServer).UpdateProduct(ctx, req.(*CommandProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductCommandService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCommandServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductCommandService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCommandServiceServer).DeleteProduct(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductCommandService_ServiceDesc is the grpc.ServiceDesc for ProductCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.ProductCommandService",
	HandlerType: (*ProductCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createProduct",
			Handler:    _ProductCommandService_CreateProduct_Handler,
		},
		{
			MethodName: "updateProduct",
			Handler:    _ProductCommandService_UpdateProduct_Handler,
		},
		{
			MethodName: "deleteProduct",
			Handler:    _ProductCommandService_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.service.proto",
}
