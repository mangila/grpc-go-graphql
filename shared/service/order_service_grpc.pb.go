// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: order/order_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	model "shared/model"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderQueryService_GetOrder_FullMethodName     = "/order.OrderQueryService/getOrder"
	OrderQueryService_GetAllOrders_FullMethodName = "/order.OrderQueryService/getAllOrders"
)

// OrderQueryServiceClient is the client API for OrderQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderQueryServiceClient interface {
	GetOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*model.Order, error)
	GetAllOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
}

type orderQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderQueryServiceClient(cc grpc.ClientConnInterface) OrderQueryServiceClient {
	return &orderQueryServiceClient{cc}
}

func (c *orderQueryServiceClient) GetOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*model.Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Order)
	err := c.cc.Invoke(ctx, OrderQueryService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderQueryServiceClient) GetAllOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderQueryService_GetAllOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderQueryServiceServer is the server API for OrderQueryService service.
// All implementations must embed UnimplementedOrderQueryServiceServer
// for forward compatibility.
type OrderQueryServiceServer interface {
	GetOrder(context.Context, *wrapperspb.StringValue) (*model.Order, error)
	GetAllOrders(context.Context, *emptypb.Empty) (*GetAllOrdersResponse, error)
	mustEmbedUnimplementedOrderQueryServiceServer()
}

// UnimplementedOrderQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderQueryServiceServer struct{}

func (UnimplementedOrderQueryServiceServer) GetOrder(context.Context, *wrapperspb.StringValue) (*model.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderQueryServiceServer) GetAllOrders(context.Context, *emptypb.Empty) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (UnimplementedOrderQueryServiceServer) mustEmbedUnimplementedOrderQueryServiceServer() {}
func (UnimplementedOrderQueryServiceServer) testEmbeddedByValue()                           {}

// UnsafeOrderQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderQueryServiceServer will
// result in compilation errors.
type UnsafeOrderQueryServiceServer interface {
	mustEmbedUnimplementedOrderQueryServiceServer()
}

func RegisterOrderQueryServiceServer(s grpc.ServiceRegistrar, srv OrderQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderQueryService_ServiceDesc, srv)
}

func _OrderQueryService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueryServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueryService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueryServiceServer).GetOrder(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderQueryService_GetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderQueryServiceServer).GetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderQueryService_GetAllOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderQueryServiceServer).GetAllOrders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderQueryService_ServiceDesc is the grpc.ServiceDesc for OrderQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderQueryService",
	HandlerType: (*OrderQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOrder",
			Handler:    _OrderQueryService_GetOrder_Handler,
		},
		{
			MethodName: "getAllOrders",
			Handler:    _OrderQueryService_GetAllOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order_service.proto",
}

const (
	OrderCommandService_CreateOrder_FullMethodName = "/order.OrderCommandService/createOrder"
	OrderCommandService_UpdateOrder_FullMethodName = "/order.OrderCommandService/updateOrder"
	OrderCommandService_DeleteOrder_FullMethodName = "/order.OrderCommandService/deleteOrder"
)

// OrderCommandServiceClient is the client API for OrderCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderCommandServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*model.Order, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*model.Order, error)
	DeleteOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type orderCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderCommandServiceClient(cc grpc.ClientConnInterface) OrderCommandServiceClient {
	return &orderCommandServiceClient{cc}
}

func (c *orderCommandServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*model.Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Order)
	err := c.cc.Invoke(ctx, OrderCommandService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCommandServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*model.Order, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.Order)
	err := c.cc.Invoke(ctx, OrderCommandService_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCommandServiceClient) DeleteOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, OrderCommandService_DeleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderCommandServiceServer is the server API for OrderCommandService service.
// All implementations must embed UnimplementedOrderCommandServiceServer
// for forward compatibility.
type OrderCommandServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*model.Order, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*model.Order, error)
	DeleteOrder(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedOrderCommandServiceServer()
}

// UnimplementedOrderCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderCommandServiceServer struct{}

func (UnimplementedOrderCommandServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*model.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderCommandServiceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*model.Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrderCommandServiceServer) DeleteOrder(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedOrderCommandServiceServer) mustEmbedUnimplementedOrderCommandServiceServer() {}
func (UnimplementedOrderCommandServiceServer) testEmbeddedByValue()                             {}

// UnsafeOrderCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderCommandServiceServer will
// result in compilation errors.
type UnsafeOrderCommandServiceServer interface {
	mustEmbedUnimplementedOrderCommandServiceServer()
}

func RegisterOrderCommandServiceServer(s grpc.ServiceRegistrar, srv OrderCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderCommandService_ServiceDesc, srv)
}

func _OrderCommandService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCommandServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderCommandService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCommandServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCommandService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCommandServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderCommandService_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCommandServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCommandService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCommandServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderCommandService_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCommandServiceServer).DeleteOrder(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderCommandService_ServiceDesc is the grpc.ServiceDesc for OrderCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderCommandService",
	HandlerType: (*OrderCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createOrder",
			Handler:    _OrderCommandService_CreateOrder_Handler,
		},
		{
			MethodName: "updateOrder",
			Handler:    _OrderCommandService_UpdateOrder_Handler,
		},
		{
			MethodName: "deleteOrder",
			Handler:    _OrderCommandService_DeleteOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order_service.proto",
}
